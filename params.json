{"name":"Async-astar","tagline":"An asynchronous, generic A*(a-star) solver.","body":"[![NPM](https://nodei.co/npm/async-astar.png?downloads=true)](https://nodei.co/npm/async-astar/)\r\n\r\nAsync-Astar [![Build Status](https://travis-ci.org/tssweeney/async-astar.svg)](https://travis-ci.org/tssweeney/async-astar)\r\n====\r\n\r\n**[View Documentation](http://timssweeney.com/async-astar/src/AsyncAstar.js.html)**\r\n\r\n\r\nUsage:\r\n\r\n  var solver = new AsyncAstar({\r\n    initial: {Object}\r\n    neighbors: {Function},\r\n    heuristic: {Function},\r\n    onComplete: {Function},\r\n    onTimeout: {Function},\r\n    timeout: {Integer}\r\n  });\r\n\r\nIntial should be an object with at least the following variables:\r\n- id {String} Uniquely identifies puzzle/game state\r\n- state {Integer} -1|0|1 Impossible|Playing|Win respectively. This a-star solver can handle imposible cases (perhaps a wall, or a pit of doom)\r\n\r\nNeighbors should return the neighboring states of a given state\r\n- returns an array of neighboring states formatted with the minimum requirements above in addition to \"action\". \"action\" is a varaible that represents what it takes to get from the given state to the neighbor (directional, keypress, etc..)\r\n- states will retain their values so you can put additional information in them (x,y perhaps)\r\n\r\nHeuristic should take a state description and return a value (lower the better)\r\n- The heuristic is the estimated \"distance\" from the win-state. If this does not apply to your puzzle, just return 0.\r\n\r\nonComplete will be passed a an object formatted in this way:\r\n- success: boolean if the puzzle was solved\r\n- path: array of actions to get to solution\r\n- cost: count of actions needed\r\n\r\nonTimeout: function will be called if the solver times out\r\n\r\ntimeout:\r\n- maximum allowed execution time. Defaults to 0 (never).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}